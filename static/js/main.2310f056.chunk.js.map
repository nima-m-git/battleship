{"version":3,"sources":["ships.js","index.js","gameboard.js","player.js"],"names":["ships","length","ship","i","push","spot","hit","hitSpot","hasSunk","every","TESTSHIPS","DisplayBoard","board","row","fill","props","generateDisplay","whose","active","currentPlayer","name","winner","activeBoard","gameboard","map","key","j","onClick","receiveAttack","id","className","player1Board","player2Board","Gameboard","state","randomSetup","bind","resetGame","isComputer","computerMove","this","checkWin","nextPlayerTurn","createGameboard","generateRandomCoords","dir","Math","floor","random","axis","coords","randomCoord","checkEmpty","spots","coord","placeShip","forEach","placeCustomShip","randomFillShips","randomCoords","areAllSunk","gameboards","enemyBoard","emptySpots","filter","computerMoves","console","log","setState","React","Component","Gameplay","players","player1","type","score","player2","allSunk","applyWin","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2310f056.chunk.js","sourcesContent":["const ships = (length) => {\n    const ship = [];\n    (function() {\n        for (let i=0; i<length; i++) {\n            ship.push({\n                spot: i,\n                hit: false\n            });\n        }\n    })();\n\n    const hitSpot = (spot) => {\n        ship[spot].hit = true;\n    }\n\n    const hasSunk = () => ship.every(spot => spot.hit)\n\n    return {\n        ship,\n        length,\n        hitSpot,\n        hasSunk,\n    }\n}\n\nconst GAMESHIPS = [\n    ships(1), ships(1), ships(1), ships(1), ships(1),\n    ships(2), ships(2), ships(2), ships(2),\n    ships(3), ships(3), ships(3),\n    ships(4), ships(4),\n    ships(5)\n]\n\n// REMOVE AFTER TESTS\nconst TESTSHIPS = [\n    ships(1), ships(1), \n]\n\nexport { GAMESHIPS, TESTSHIPS }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport { gameboards} from './gameboard';\nimport { GAMESHIPS } from './ships';\nimport { computerMoves } from './player';\n\n\nconst DisplayBoard = (props) => {\n  const activeBoard = (whose) => whose !== props.currentPlayer.name && !props.winner\n\n  const generateDisplay = (board, whose) => {\n    const active = activeBoard(whose);\n    return board.gameboard.map((row, i) => \n      <tr key={i}>\n        {row.map((spot, j) => \n          <td \n            key={j} \n            hit={`${spot.hit}`} \n            fill={`${spot.fill}`} \n            onClick={(active)? () => props.receiveAttack(spot, board) : null}\n            >\n          </td>)}\n      </tr> \n    )\n  } \n\n  return (\n    <div id='gameBoards'>\n      <div>\n        <h3>Player1</h3>\n        <table className={((props.currentPlayer.name === 'player2')? 'active' : 'inactive') + ' player1 board '}>\n          <tbody>\n            {generateDisplay(props.player1Board, 'player1')}\n          </tbody>\n        </table>\n      </div>\n      <div>\n        <h3>Player2</h3>\n        <table className={((props.currentPlayer.name === 'player1')? 'active' : 'inactive') + ' player2 board '}>\n          <tbody>\n            {generateDisplay(props.player2Board, 'player2')}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  )\n}\n \n\nclass Gameboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      player1Board: this.randomSetup(),\n      player2Board: this.randomSetup(),\n    }\n    this.receiveAttack = this.receiveAttack.bind(this);\n    this.randomSetup = this.randomSetup.bind(this);\n    this.resetGame = this.resetGame.bind(this);\n\n    if (props.isComputer) {\n      this.computerMove()\n    }\n  }\n\n  receiveAttack(spot, board) {\n    if (!spot.hit) { // Change to add filter to spot onclick can be placed\n      spot.hit = true;\n      if (spot.ship) {\n          spot.ship.hitSpot(spot.spot)\n      }\n      if (!this.props.checkWin(board)) {\n        this.props.nextPlayerTurn() \n      }\n    }\n  }\n\n  randomSetup() {\n    const board = gameboards()\n    board.randomFillShips()\n    return board\n  }\n\n  computerMove() {\n    const enemyBoard = (this.props.currentPlayer.name === 'player1')? this.state.player2Board : this.state.player1Board\n    const spot = computerMoves(enemyBoard);\n    console.log(spot)\n    this.receiveAttack(spot, enemyBoard);\n  }\n\n  // Tight coupling? single function resets two different component states\n  resetGame() {\n    this.props.resetGame()\n    this.setState({\n      player1Board: this.randomSetup(),\n      player2Board: this.randomSetup()\n    })\n  }\n\n  render() {\n    return(\n      <div>\n        <DisplayBoard \n          currentPlayer={this.props.currentPlayer}\n          player1Board={this.state.player1Board} \n          player2Board={this.state.player2Board} \n          receiveAttack={this.receiveAttack}\n          winner={this.props.winner}\n        />\n        <div id='reset'>\n          {this.props.winner \n            && <button onClick={this.resetGame}>Reset Game</button>\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\n\nclass Gameplay extends React.Component {\n  constructor(props) {\n    super(props);\n    this.players = {\n      player1: {\n        name: 'player1',\n        type: 'human',\n        score: 0,\n        gameboard: null\n      },\n      player2: {\n        name: 'player2',\n        type: 'computer',\n        score: 0,\n      }\n    }\n    this.state = {\n      currentPlayer: this.players.player1,\n      winner: null,\n    };\n    this.nextPlayerTurn = this.nextPlayerTurn.bind(this);\n    this.checkWin = this.checkWin.bind(this);\n    this.resetGame = this.resetGame.bind(this);\n  }\n\n  nextPlayerTurn() {\n    this.setState({\n      currentPlayer: (this.state.currentPlayer === this.players.player1)? this.players.player2 : this.players.player1,\n    })\n  }\n\n  checkWin(board) {\n    const allSunk = board.areAllSunk();\n    if (allSunk) {\n      this.applyWin()\n    }\n    return allSunk\n  }\n\n  applyWin() {\n    const winner = this.state.currentPlayer;\n    this.setState({\n      winner,\n    })\n    winner.score++  \n  }\n\n  resetGame() {\n    this.setState({\n      winner: null,\n    })\n    this.nextPlayerTurn()\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.winner \n          && <h2>Winner: {this.state.winner.name}!</h2>\n        }\n        <div className='scoreBoard'>\n          <h2>Scores:</h2>\n          <h3>Player1: {this.players.player1.score}  Player2: {this.players.player2.score}</h3>\n        </div>\n        <h2>Turn: {this.state.currentPlayer.name}</h2>\n        <Gameboard \n          currentPlayer={this.state.currentPlayer}\n          isComputer={this.state.currentPlayer.type === 'computer'} \n          nextPlayerTurn={this.nextPlayerTurn}\n          checkWin={this.checkWin}\n          winner={this.state.winner}\n          resetGame={this.resetGame}\n        />\n      </div>\n    )\n  }\n}\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <h1>Battleship</h1>\n    <Gameplay />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","import { GAMESHIPS, TESTSHIPS } from './ships';\n\nconst gameboards = () => {\n    let gameboard = createGameboard();\n\n    function createGameboard() {\n        let gameboard = [];\n        for (let i=0; i<10; i++) {\n            const row = [];\n            for (let i=0; i<10; i++) {\n                row.push({\n                    fill: null,\n                    hit: false\n                });\n            }\n            gameboard.push(row);\n        }\n        return gameboard\n    }\n\n    const generateRandomCoords = (ship) => {\n        const dir = (!!Math.floor(Math.random() * 2))? 'col' : 'row';\n        const axis = (Math.floor(Math.random() * 10));\n        const coords = [];\n        const randomCoord = Math.floor(Math.random() * (10 - ship.length))\n        for (let i=0; i<ship.length; i++) {\n            coords.push(randomCoord + i)\n        }\n\n        return {\n            dir,\n            axis,\n            coords,\n        }\n    }\n\n    const randomFillShips = () => {\n        // CHANGE BACK TO GAMESHIPS AFTER TESTS\n        for (let ship of TESTSHIPS) {\n            let randomCoords = generateRandomCoords(ship);\n            while (!checkEmpty({...randomCoords})) {\n                randomCoords = generateRandomCoords(ship);\n            }\n            placeShip({...randomCoords, ship})\n        }\n    }\n\n    const checkEmpty = ({ dir, axis, coords, }) => {\n        const spots = [];\n        for (let coord of coords) {\n            if (dir === 'col') {\n                spots.push(gameboard[coord][axis].fill)\n            } else if (dir === 'row') {\n                spots.push(gameboard[axis][coord].fill)\n            }\n        }\n        return (spots.every(spot => !spot))\n    }\n\n    const placeCustomShip = ({ ship, dir, axis, coords }) => {\n        if (checkEmpty({dir, axis, coords,})) {\n            placeShip({ ship, dir, axis, coords })\n        }\n    }\n\n    const placeShip = ({ ship, dir, axis, coords }) => {\n        coords.forEach(function(coord, spot) {\n            if (dir === 'col') {\n                gameboard[coord][axis] = {\n                    ...gameboard[coord][axis],\n                    fill: true,\n                    spot,\n                    ship,\n                }\n            } else if (dir === 'row') {\n                gameboard[axis][coord] = {\n                    ...gameboard[coord][axis],\n                    fill: true,\n                    spot,\n                    ship,\n                }\n            }\n        })\n    }\n\n    // REMOVE: changes state, use in component method\n    const receiveAttack = (spot) => {\n        spot.hit = true;\n        if (spot.ship) {\n            spot.ship.hitSpot(spot.spot)\n        }\n    }\n\n\n    const areAllSunk = () => {\n        for (let row of gameboard) {\n            for (let spot of row) {\n                if (spot.fill === true && spot.hit === false) {\n                    return false\n                }\n            }\n        }\n        return true\n    }\n\n    return {\n        gameboard,\n        placeCustomShip,\n        checkEmpty, // DELETE AFTER TESTS\n        randomFillShips,\n        receiveAttack,\n        areAllSunk\n    }\n}\n\n\nconst emptyBoard = (function() {\n    const board = [];\n    for (let i=0; i<10; i++) {\n        const row = [];\n        for (let i=0; i<10; i++) {\n            row.push({\n                fill: null,\n                hit: false\n            });\n        }\n        board.push(row);\n    }\n    return board\n}());\n  \n\nexport { gameboards, emptyBoard }","const computerMoves = (enemyBoard) => {\n    // TOSEE: possibly change from filter function to dynamically added list \n    //       of spots remaining for performance\n    const emptySpots = () => {\n        const spots = [];\n        for(let row of enemyBoard.gameboard) {\n            for(let spot of row) {\n                spots.push(spot)\n            }\n        }\n        return spots.filter(spot => !spot.hit);\n    }\n\n    return emptySpots()[Math.floor(Math.random() * emptySpots().length)];\n\n}\n\nexport { computerMoves }"],"sourceRoot":""}